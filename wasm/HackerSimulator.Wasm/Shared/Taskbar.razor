@implements IDisposable
@inject WindowManagerService WindowManager

<div class="taskbar">
    <button class="start-button">Start</button>
    @foreach (var win in _windows)
    {
        <button class="task-button @(win == _active ? "active" : "")" @onclick="() => Activate(win)">
            @if (!string.IsNullOrEmpty(win.Icon))
            {
                <img src="@win.Icon" class="task-icon" />
            }
            <span class="task-title">@win.Title</span>
        </button>
    }
</div>

<style>
.taskbar {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 40px;
    background: #111;
    display: flex;
    align-items: center;
}
.start-button {
    margin: 0 4px;
    height: 32px;
}
.task-button {
    display: flex;
    align-items: center;
    margin: 0 2px;
    padding: 0 6px;
    height: 32px;
    background: #222;
    color: #eee;
    border: none;
}
.task-button.active {
    background: #444;
}
.task-icon {
    width: 16px;
    height: 16px;
    margin-right: 4px;
}
</style>

@code {
    private readonly List<WindowBase> _windows = new();
    private WindowBase? _active;

    protected override void OnInitialized()
    {
        _windows.AddRange(WindowManager.Windows);
        WindowManager.WindowOpened += OnWindowOpened;
        WindowManager.WindowClosed += OnWindowClosed;
        WindowManager.ActiveWindowChanged += OnActiveWindowChanged;
        _active = WindowManager.Windows.FirstOrDefault(w => w.IsActive);
    }

    private void OnWindowOpened(WindowBase win)
    {
        _windows.Add(win);
        StateHasChanged();
    }

    private void OnWindowClosed(WindowBase win)
    {
        _windows.Remove(win);
        StateHasChanged();
    }

    private void OnActiveWindowChanged(WindowBase? win)
    {
        _active = win;
        StateHasChanged();
    }

    private void Activate(WindowBase win)
    {
        if (win.State == WindowState.Minimized)
        {
            win.Visible = true;
            win.Restore();
        }
        win.Activate();
    }

    public void Dispose()
    {
        WindowManager.WindowOpened -= OnWindowOpened;
        WindowManager.WindowClosed -= OnWindowClosed;
        WindowManager.ActiveWindowChanged -= OnActiveWindowChanged;
    }
}
