@page "/welcome"
@using Microsoft.JSInterop
@inject AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime

<div class="welcome-container">
    <div class="code-background" id="codeBackground"></div>
    <div class="welcome-card">
        <h1 class="welcome-title">H4CK3R OS</h1>
        <p class="welcome-subtitle">Create your administrator account to begin your hacking journey</p>

        <div class="welcome-form">
            <input placeholder="Username" @bind="username" class="welcome-input" />
            <input placeholder="Password" type="password" @bind="password" class="welcome-input" />
            <button @onclick="CreateAdmin">Initialize System</button>
        </div>
    </div>
</div>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        if (Auth.HasUsers)
            Nav.NavigateTo("/login", true);
    }   
     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add the animation script dynamically

            // var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/database.js");
            // await module.InvokeVoidAsync("initializeCodeAnimation");
            await JSRuntime.InvokeVoidAsync("eval", @"
                if(!window.welcomeScriptLoaded) {
                    window.welcomeScriptLoaded = true;
                    var script = document.createElement('script');
                    script.src = './js/welcome-animation.js';
                    script.onload = function() { 
                        if(typeof window.initializeCodeAnimation === 'function') {
                            window.initializeCodeAnimation();
                        }
                    };
                    document.head.appendChild(script);
                } else if(typeof window.initializeCodeAnimation === 'function') {
                    window.initializeCodeAnimation();
                }
            ");
        }
    }

    private async Task CreateAdmin()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
            return;
        
        isLoading = true;
        await Auth.CreateUser(username, password, 1);
        await Auth.Login(username, password);
        Nav.NavigateTo("/", true);
    }
}
