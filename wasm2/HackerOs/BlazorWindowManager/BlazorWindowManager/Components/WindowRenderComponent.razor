@using BlazorWindowManager.Models
@using BlazorWindowManager.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.DependencyInjection
@implements IDisposable

<div class="window-render-container">
    @* Debug info *@
    <div class="debug-info" style="position: absolute; top: 0; right: 0; background: rgba(255,0,0,0.8); color: white; padding: 5px; z-index: 9999; font-size: 12px;">
        Windows: @_windowsToRender.Count
    </div>

    @foreach (var windowInfo in _windowsToRender)
    {
        var context = GetOrCreateContext(windowInfo);
        <CascadingValue IsFixed="true" TValue="WindowContext" Value="context">
            @(CreateDynamicComponentWithScope(windowInfo, context.ServiceProvider))
        </CascadingValue>
    }
</div>

@code {
    [Inject] private WindowManagerService WindowManager { get; set; } = default!;
    [Inject] private IServiceScopeFactory ScopeFactory { get; set; } = default!;

    private Dictionary<WindowInfo, WindowContext> contexts = new();
    private List<WindowInfo> _windowsToRender = new();

    protected override void OnInitialized()
    {
        // Subscribe to window manager events
        WindowManager.WindowRegistered += OnWindowRegistered;
        WindowManager.WindowUnregistered += OnWindowUnregistered;

        // Load any existing windows
        var existingWindows = WindowManager.GetAllWindows();
        _windowsToRender.AddRange(existingWindows);

        base.OnInitialized();
    }
    private WindowContext GetOrCreateContext(WindowInfo windowInfo)
    {
        if (contexts.ContainsKey(windowInfo))
            return contexts[windowInfo];
        var scope = ScopeFactory.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<WindowContext>();
        context.Info = windowInfo;
        context.ServiceProvider = scope.ServiceProvider;
        context.serviceScope = scope;
        return context;
    }
    private void OnWindowRegistered(object? sender, WindowEventArgs e)
    {
        // Add window to render list - this gets called when a window is created
        if (e?.Window != null)
        {
            var existingWindow = _windowsToRender.FirstOrDefault(w => w.Id == e.Window.Id);
            if (existingWindow == null)
            {
                _windowsToRender.Add(e.Window);
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private void OnWindowUnregistered(object? sender, WindowEventArgs e)
    {
        // Remove window from render list
        if (e?.Window != null)
        {
            var windowToRemove = _windowsToRender.FirstOrDefault(w => w.Id == e.Window.Id);
            if (windowToRemove != null)
            {
                _windowsToRender.Remove(windowToRemove);
                InvokeAsync(StateHasChanged);
            }
        }
    }
    private Type GetComponentType(string typeName)
    {
        // Try to resolve the type from the component type name
        // First check common window types in this assembly
        var assembly = typeof(WindowBase).Assembly;
        var fullTypeName = $"BlazorWindowManager.Components.{typeName}";
        var type = assembly.GetType(fullTypeName);

        if (type != null)
            return type;

        // If not found, try without namespace
        var types = assembly.GetTypes().Where(t => t.Name == typeName).ToArray();
        if (types.Length > 0)
            return types[0];

        // Fallback to WindowBase
        return typeof(WindowBase);
    }
    private RenderFragment CreateDynamicComponent(WindowInfo windowInfo) => builder =>
  {
      builder.OpenComponent(0, typeof(Microsoft.AspNetCore.Components.DynamicComponent));

      builder.AddAttribute(1, "Type", GetComponentType(windowInfo.ComponentType));
      builder.AddAttribute(2, "Parameters", ConvertParameters(windowInfo.Parameters));
      builder.SetKey(windowInfo.Id);
      builder.CloseComponent();
  };
    private RenderFragment CreateDynamicComponentWithScope(WindowInfo windowInfo, IServiceProvider? customServiceProvider = null) => builder =>
{
    var serviceProvider = customServiceProvider ?? ScopeFactory.CreateScope().ServiceProvider;

    builder.OpenComponent(0, typeof(CascadingValue<IServiceProvider>));
    builder.AddAttribute(1, "Value", serviceProvider);
    builder.AddAttribute(2, "ChildContent", (RenderFragment)(childBuilder =>
    {
        childBuilder.OpenComponent(0, typeof(Microsoft.AspNetCore.Components.DynamicComponent));
        childBuilder.AddAttribute(1, "Type", GetComponentType(windowInfo.ComponentType));
        childBuilder.AddAttribute(2, "Parameters", ConvertParameters(windowInfo.Parameters));
        childBuilder.SetKey(windowInfo.Id);
        childBuilder.CloseComponent();
    }));
    builder.CloseComponent();
};

    private Dictionary<string, object> ConvertParameters(Dictionary<string, object> parameters)
    {
        var convertedParameters = new Dictionary<string, object>();

        foreach (var parameter in parameters)
        {
            var key = parameter.Key;
            var value = parameter.Value;

            // Convert numeric parameters that should be double? for window positioning and sizing
            if (key == "InitialX" || key == "InitialY" || key == "InitialWidth" || key == "InitialHeight")
            {
                if (value is int intValue)
                {
                    convertedParameters[key] = (double?)intValue;
                }
                else if (value is double doubleValue)
                {
                    convertedParameters[key] = (double?)doubleValue;
                }
                else if (value is float floatValue)
                {
                    convertedParameters[key] = (double?)floatValue;
                }
                else
                {
                    convertedParameters[key] = value; // Keep original value if it's already correct type or null
                }
            }
            else
            {
                convertedParameters[key] = value; // Keep other parameters as-is
            }
        }

        return convertedParameters;
    }

    public void Dispose()
    {
        WindowManager.WindowRegistered -= OnWindowRegistered;
        WindowManager.WindowUnregistered -= OnWindowUnregistered;
    }
}
