<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlazorWindowManager</name>
    </assembly>
    <members>
        <member name="T:BlazorWindowManager.Components.DesktopArea">
            <summary>
            Represents a desktop area that can contain windows and other desktop elements
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DesktopArea.ChildContent">
            <summary>
            Content to be rendered within the desktop area
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DesktopArea.CssClass">
            <summary>
            CSS classes to apply to the desktop area
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DesktopArea.Width">
            <summary>
            Width of the desktop area (defaults to 100%)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DesktopArea.Height">
            <summary>
            Height of the desktop area (defaults to 100vh)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DesktopArea.Background">
            <summary>
            Background color or pattern for the desktop
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DesktopArea.ShowGrid">
            <summary>
            Whether to show a grid pattern on the desktop
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DesktopArea.GridSize">
            <summary>
            Size of grid cells if ShowGrid is enabled
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.DesktopArea.GetDesktopBounds">
            <summary>
            Gets the bounds of the desktop area for window constraint calculations
            </summary>
            <returns>WindowBounds representing the desktop area</returns>
        </member>
        <member name="T:BlazorWindowManager.Components.DialogBase`1">
            <summary>
            Base class for dialog components that provides modal dialog functionality
            </summary>
            <typeparam name="TResult">The type of result returned by the dialog</typeparam>
        </member>
        <member name="P:BlazorWindowManager.Components.DialogBase`1.ChildContent">
            <summary>
            Content to display inside the dialog
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DialogBase`1.IsModal">
            <summary>
            Whether this dialog is modal (blocks interaction with parent/other windows)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DialogBase`1.CloseOnOverlayClick">
            <summary>
            Whether clicking the modal overlay should close the dialog
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DialogBase`1.OwnerWindow">
            <summary>
            The parent window that owns this dialog (null for application-modal)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DialogBase`1.OnDialogClosing">
            <summary>
            Event raised when the dialog is about to close, provides the result
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.DialogBase`1.OnDialogClosed">
            <summary>
            Event raised after the dialog has closed
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.DialogBase`1.ShowDialogAsync">
            <summary>
            Shows the dialog and returns a task that completes when the dialog is closed
            </summary>
            <returns>A task that resolves to the dialog result</returns>
        </member>
        <member name="M:BlazorWindowManager.Components.DialogBase`1.CloseDialogAsync(BlazorWindowManager.Models.DialogResult{`0})">
            <summary>
            Closes the dialog with the specified result
            </summary>
            <param name="result">The dialog result</param>
        </member>
        <member name="M:BlazorWindowManager.Components.DialogBase`1.CloseWithResultAsync(`0,System.String)">
            <summary>
            Closes the dialog with a successful result
            </summary>
            <param name="data">The result data</param>
            <param name="closeReason">The reason for closing</param>
        </member>
        <member name="M:BlazorWindowManager.Components.DialogBase`1.CancelDialogAsync(System.String)">
            <summary>
            Closes the dialog as cancelled
            </summary>
            <param name="closeReason">The reason for cancelling</param>
        </member>
        <member name="M:BlazorWindowManager.Components.DialogBase`1.CloseWithErrorAsync(System.String,System.String)">
            <summary>
            Closes the dialog with an error
            </summary>
            <param name="errorMessage">The error message</param>
            <param name="closeReason">The reason for closing</param>
        </member>
        <member name="T:BlazorWindowManager.Components.DialogDemo">
            <summary>
            Demonstration component for various dialog types and functionality
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Components.MessageBoxDialog">
            <summary>
            Message box dialog component for displaying messages with various button configurations
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.MessageBoxDialog.Message">
            <summary>
            The message to display in the dialog
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.MessageBoxDialog.Buttons">
            <summary>
            The buttons to show in the dialog
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.MessageBoxDialog.Icon">
            <summary>
            The icon to display in the dialog
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.MessageBoxDialog.OnBeforeCloseAsync">
            <inheritdoc/>
        </member>
        <member name="T:BlazorWindowManager.Components.PromptDialog">
            <summary>
            Input prompt dialog component for collecting user text input
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.Message">
            <summary>
            The prompt message to display
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.DefaultValue">
            <summary>
            The default value for the input
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.InputLabel">
            <summary>
            The label for the input field
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.Placeholder">
            <summary>
            The placeholder text for the input
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.InputType">
            <summary>
            The type of input (text, password, email, etc.)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.MaxLength">
            <summary>
            Maximum length of input
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.Required">
            <summary>
            Whether the input is required
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.ShowCharacterCount">
            <summary>
            Whether to show character count
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.ValidationFunction">
            <summary>
            Custom validation function
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.PromptDialog.ValidationErrorMessage">
            <summary>
            Validation error message
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Components.SampleWindow">
            <summary>
            Sample window component demonstrating window functionality
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Components.SnappingDemo">
            <summary>
            Demo page for testing and validating window snapping functionality
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Components.SnappingDemo.TestWindowInfo">
            <summary>
            Test window information for demo purposes
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.SnappingDemo.OnInitializedAsync">
            <summary>
            Initializes the snapping demo component
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.SnappingDemo.Dispose">
            <summary>
            Disposes the component and unsubscribes from events
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Components.SnapPreview">
            <summary>
            Component for displaying snap preview overlays during window dragging
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Components.TaskBarComponent">
            <summary>
            Task bar component for displaying and managing open windows
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.TaskBarComponent.LeftContent">
            <summary>
            Content to display on the left side of the taskbar (e.g., Start Menu button)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.TaskBarComponent.RightContent">
            <summary>
            Content to display on the right side of the taskbar (e.g., system tray icons)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.TaskBarComponent.GroupedWindows">
            <summary>
            Whether to group windows by type in the taskbar
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.TaskBarComponent.MaxTitleLength">
            <summary>
            Maximum length of window title to display in taskbar button
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Components.WindowBase">
            <summary>
            Base window component that provides core windowing functionality including
            dragging, resizing, state management, and integration with WindowManagerService.
            </summary>
            <summary>
            Base window component that provides core windowing functionality including
            dragging, resizing, state management, and integration with WindowManagerService.
            This is the main partial class file containing parameters and core properties.
            </summary>
            <summary>
            WindowBase partial class - Event parameters and handling
            </summary>
            <summary>
            WindowBase partial class - User interactions and JavaScript interop
            </summary>
            <summary>
            WindowBase partial class - Component lifecycle methods
            </summary>
            <summary>
            WindowBase partial class - Public API methods
            </summary>
            <summary>
            WindowBase partial class - Utility methods and virtual methods
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.WindowManager">
            <summary>
            Window manager service for managing windows
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.JSRuntime">
            <summary>
            JavaScript runtime for interop
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.SnappingService">
            <summary>
            Snapping service for window snapping functionality
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.ServiceProvider">
            <summary>
            Service provider for dependency injection
            </summary>
        </member>
        <member name="F:BlazorWindowManager.Components.WindowBase._jsModule">
            <summary>
            JavaScript module reference for window interactions
            </summary>
        </member>
        <member name="F:BlazorWindowManager.Components.WindowBase._dotNetRef">
            <summary>
            .NET object reference for JavaScript callbacks
            </summary>
        </member>
        <member name="F:BlazorWindowManager.Components.WindowBase._windowScope">
            <summary>
            Service scope for this window instance
            </summary>
        </member>
        <member name="F:BlazorWindowManager.Components.WindowBase._windowInfo">
            <summary>
            Window information tracked by the window manager
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.CurrentBounds">
            <summary>
            Current bounds (position and size) of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.CurrentState">
            <summary>
            Current state of the window (Normal, Minimized, Maximized)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.IsActive">
            <summary>
            Whether this window is currently active (has focus)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.WindowContext">
            <summary>
            Service scope for this window instance
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.GetContainerBounds">
            <summary>
            Gets the bounds of the desktop container for snapping calculations
            </summary>
            <returns>The bounds of the container where windows can be placed</returns>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.OnMessageReceived(BlazorWindowManager.Models.WindowMessageEventArgs)">
            <summary>
            Handles messages received from other windows
            </summary>
            <param name="args">Message event arguments</param>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.Id">
            <summary>
            Unique identifier for this window instance
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.Name">
            <summary>
            Optional user-defined name for the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.Title">
            <summary>
            Title displayed in the window's title bar
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.Icon">
            <summary>
            Optional icon content for the title bar
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.ChildContent">
            <summary>
            Content to be displayed in the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.Resizable">
            <summary>
            Whether the window can be resized
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.MinWidth">
            <summary>
            Minimum width constraint in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.MinHeight">
            <summary>
            Minimum height constraint in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.MaxWidth">
            <summary>
            Maximum width constraint in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.MaxHeight">
            <summary>
            Maximum height constraint in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.InitialX">
            <summary>
            Initial X position when the window is first created
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.InitialY">
            <summary>
            Initial Y position when the window is first created
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.InitialWidth">
            <summary>
            Initial width when the window is first created
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.InitialHeight">
            <summary>
            Initial height when the window is first created
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.CssClass">
            <summary>
            Additional CSS class to apply to the window container
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.ParentWindow">
            <summary>
            Parent window for modal dialogs
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.IsModal">
            <summary>
            Whether this window is modal (blocks interaction with other windows)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.ShowCloseButton">
            <summary>
            Whether the close button should be shown in the title bar
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnBeforeClose">
            <summary>
            Raised before the window is closed (cancellable)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnAfterClose">
            <summary>
            Raised after the window is closed
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnFocus">
            <summary>
            Raised when the window gains focus
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnBlur">
            <summary>
            Raised when the window loses focus
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnMoved">
            <summary>
            Raised when the window is moved
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnMoving">
            <summary>
            Raised while the window is being moved
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnResized">
            <summary>
            Raised when the window is resized
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnResizing">
            <summary>
            Raised while the window is being resized
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnStateChanged">
            <summary>
            Raised when the window state changes
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnTitleChanged">
            <summary>
            Raised when the window title changes
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Components.WindowBase.OnContentLoaded">
            <summary>
            Raised when the window content is loaded
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.OnDragMove(System.Double,System.Double)">
            <summary>
            Called from JavaScript during window dragging
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.OnDragEnd">
            <summary>
            Called from JavaScript when window dragging ends
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.OnResizeMove(System.Double,System.Double)">
            <summary>
            Called from JavaScript during window resizing
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.OnResizeEnd">
            <summary>
            Called from JavaScript when resizing ends
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.Close(System.Boolean)">
            <summary>
            Closes the window, optionally forcing the close without cancellation check
            </summary>
            <param name="force">Whether to force close without checking for cancellation</param>
            <returns>True if the window was closed</returns>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.Minimize">
            <summary>
            Minimizes the window
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.Maximize">
            <summary>
            Maximizes the window
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.Restore">
            <summary>
            Restores the window to normal state
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.BringToFront">
            <summary>
            Brings this window to the front and gives it focus
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.GetWindowService``1">
            <summary>
            Gets a service from the window's scoped service collection
            </summary>
            <typeparam name="T">Type of service to retrieve</typeparam>
            <returns>The requested service</returns>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.SetTitle(System.String)">
            <summary>
            Updates the window title
            </summary>
            <param name="newTitle">New title for the window</param>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.OnBeforeCloseAsync">
            <summary>
            Called before the window is closed. Override to provide custom close validation.
            </summary>
            <returns>True if the window can be closed, false to cancel the close operation</returns>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.OnAfterCloseAsync">
            <summary>
            Called after the window has been closed. Override to provide custom cleanup logic.
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Components.WindowBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:BlazorWindowManager.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for registering Blazor Window Manager services
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Extensions.ServiceCollectionExtensions.AddBlazorWindowManager(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Blazor Window Manager services to the dependency injection container
            </summary>
            <param name="services">The service collection to add services to</param>
            <returns>The service collection for chaining</returns>
        </member>
        <member name="M:BlazorWindowManager.Extensions.ServiceCollectionExtensions.AddBlazorWindowManager(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BlazorWindowManager.Extensions.WindowManagerOptions})">
            <summary>
            Adds Blazor Window Manager services with configuration options
            </summary>
            <param name="services">The service collection to add services to</param>
            <param name="configure">Configuration action for window manager options</param>
            <returns>The service collection for chaining</returns>
        </member>
        <member name="T:BlazorWindowManager.Extensions.WindowManagerOptions">
            <summary>
            Configuration options for the Blazor Window Manager
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.DefaultWidth">
            <summary>
            Default width for new windows
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.DefaultHeight">
            <summary>
            Default height for new windows
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.DefaultMinWidth">
            <summary>
            Default minimum width for windows
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.DefaultMinHeight">
            <summary>
            Default minimum height for windows
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.CascadeOffset">
            <summary>
            Offset amount for cascading new windows
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.TitleBarHeight">
            <summary>
            Height of the title bar in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.EnableSnapping">
            <summary>
            Whether to enable window snapping by default
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.SnapThreshold">
            <summary>
            Distance threshold for snapping in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.MaxWindows">
            <summary>
            Maximum number of windows that can be open simultaneously (0 = unlimited)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.EnableAnimations">
            <summary>
            Whether to enable animations for window operations
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Extensions.WindowManagerOptions.AnimationDuration">
            <summary>
            Duration of window animations in milliseconds
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.DialogResult`1">
            <summary>
            Represents the result of a dialog operation
            </summary>
            <typeparam name="T">The type of the result data</typeparam>
        </member>
        <member name="P:BlazorWindowManager.Models.DialogResult`1.Success">
            <summary>
            Gets whether the dialog was completed successfully (not cancelled)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.DialogResult`1.Data">
            <summary>
            Gets the result data from the dialog
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.DialogResult`1.CloseReason">
            <summary>
            Gets the button or action that was used to close the dialog
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.DialogResult`1.ErrorMessage">
            <summary>
            Gets any error message if the dialog failed
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Models.DialogResult`1.Ok(`0,System.String)">
            <summary>
            Creates a successful dialog result
            </summary>
            <param name="data">The result data</param>
            <param name="closeReason">The reason the dialog was closed</param>
            <returns>A successful DialogResult</returns>
        </member>
        <member name="M:BlazorWindowManager.Models.DialogResult`1.Cancel(System.String)">
            <summary>
            Creates a cancelled dialog result
            </summary>
            <param name="closeReason">The reason the dialog was cancelled</param>
            <returns>A cancelled DialogResult</returns>
        </member>
        <member name="M:BlazorWindowManager.Models.DialogResult`1.Error(System.String,System.String)">
            <summary>
            Creates a failed dialog result
            </summary>
            <param name="errorMessage">The error message</param>
            <param name="closeReason">The reason the dialog was closed</param>
            <returns>A failed DialogResult</returns>
        </member>
        <member name="T:BlazorWindowManager.Models.DialogResult">
            <summary>
            Non-generic version for dialogs that don't return data
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Models.DialogResult.Ok(System.String)">
            <summary>
            Creates a successful dialog result
            </summary>
            <param name="closeReason">The reason the dialog was closed</param>
            <returns>A successful DialogResult</returns>
        </member>
        <member name="M:BlazorWindowManager.Models.DialogResult.Cancel(System.String)">
            <summary>
            Creates a cancelled dialog result
            </summary>
            <param name="closeReason">The reason the dialog was cancelled</param>
            <returns>A cancelled DialogResult</returns>
        </member>
        <member name="M:BlazorWindowManager.Models.DialogResult.Error(System.String,System.String)">
            <summary>
            Creates a failed dialog result
            </summary>
            <param name="errorMessage">The error message</param>
            <param name="closeReason">The reason the dialog was closed</param>
            <returns>A failed DialogResult</returns>
        </member>
        <member name="T:BlazorWindowManager.Models.SnapPreviewInfo">
            <summary>
            Information about a snap preview being shown
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapPreviewInfo.SnapType">
            <summary>
            Type of snap being previewed
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapPreviewInfo.TargetBounds">
            <summary>
            Target bounds where the window would be placed
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapPreviewInfo.Description">
            <summary>
            Description of the snap operation
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapPreviewInfo.IsActive">
            <summary>
            Whether this preview is currently active
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.SnapResult">
            <summary>
            Result of a snap operation being applied
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapResult.SnapType">
            <summary>
            Type of snap that was applied
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapResult.WindowId">
            <summary>
            ID of the window that was snapped
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapResult.OriginalBounds">
            <summary>
            Original bounds before snapping
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapResult.NewBounds">
            <summary>
            New bounds after snapping
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapResult.Timestamp">
            <summary>
            When the snap was applied
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapResult.Description">
            <summary>
            Description of the snap operation
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.SnapResult.Success">
            <summary>
            Whether the snap was successful
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.ITheme">
            <summary>
            Interface for defining themes in the window manager
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.Id">
            <summary>
            Unique identifier for the theme
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.Name">
            <summary>
            Human-readable name of the theme
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.Description">
            <summary>
            Description of the theme
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.CssClass">
            <summary>
            CSS class name to apply to the root container
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.CssFilePath">
            <summary>
            Path to the theme's CSS file
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.Category">
            <summary>
            Theme category for organization
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.IsDarkTheme">
            <summary>
            Whether this theme supports dark mode aesthetics
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ITheme.CustomVariables">
            <summary>
            Custom CSS variables specific to this theme
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.ThemeDefinition">
            <summary>
            Built-in theme definition implementation
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.ThemeCategory">
            <summary>
            Categories for organizing themes
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.ThemeChangedEventArgs">
            <summary>
            Event arguments for theme change events
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.ThemeSettings">
            <summary>
            Theme preferences and settings
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ThemeSettings.ActiveThemeId">
            <summary>
            Currently active theme ID
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ThemeSettings.EnableThemeTransitions">
            <summary>
            Whether to apply theme transitions when switching
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ThemeSettings.TransitionDuration">
            <summary>
            Duration of theme transition animations
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ThemeSettings.PersistThemeSelection">
            <summary>
            Whether to persist theme selection across sessions
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.ThemeSettings.UserCustomVariables">
            <summary>
            Custom user-defined CSS variables that override theme defaults
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowBounds">
            <summary>
            Represents the position and size information of a window.
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.Left">
            <summary>
            The X coordinate of the window's left edge in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.Top">
            <summary>
            The Y coordinate of the window's top edge in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.Width">
            <summary>
            The width of the window in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.Height">
            <summary>
            The height of the window in pixels
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.Right">
            <summary>
            Gets the right edge coordinate (Left + Width)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.Bottom">
            <summary>
            Gets the bottom edge coordinate (Top + Height)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.X">
            <summary>
            Gets the X coordinate (alias for Left)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBounds.Y">
            <summary>
            Gets the Y coordinate (alias for Top)
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Models.WindowBounds.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new WindowBounds instance
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Models.WindowBounds.Clone">
            <summary>
            Creates a copy of this WindowBounds instance
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Models.WindowBounds.IntersectsWith(BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Checks if this bounds intersects with another bounds
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowCancelEventArgs">
            <summary>
            Event arguments for window-related events that can be cancelled
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowCancelEventArgs.Cancel">
            <summary>
            Gets or sets whether the operation should be cancelled
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowCancelEventArgs.Window">
            <summary>
            The window associated with this event
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowStateChangedEventArgs">
            <summary>
            Event arguments for window state change events
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowStateChangedEventArgs.WindowId">
            <summary>
            The ID of the window that changed state
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowStateChangedEventArgs.Window">
            <summary>
            The window that changed state
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowStateChangedEventArgs.OldState">
            <summary>
            The previous state of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowStateChangedEventArgs.NewState">
            <summary>
            The new state of the window
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowFocusChangedEventArgs">
            <summary>
            Event arguments for window focus change events
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowFocusChangedEventArgs.NewActiveWindow">
            <summary>
            The window that gained focus (null if no window has focus)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowFocusChangedEventArgs.PreviousActiveWindow">
            <summary>
            The window that lost focus (null if no previous window had focus)
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowBoundsChangedEventArgs">
            <summary>
            Event arguments for window bounds change events (moving/resizing)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBoundsChangedEventArgs.Window">
            <summary>
            The window that moved or was resized
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBoundsChangedEventArgs.OldBounds">
            <summary>
            The previous bounds of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowBoundsChangedEventArgs.NewBounds">
            <summary>
            The new bounds of the window
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowMessageEventArgs">
            <summary>
            Event arguments for inter-window message events
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowMessageEventArgs.SourceWindowId">
            <summary>
            The ID of the window that sent the message
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowMessageEventArgs.Message">
            <summary>
            The message payload
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowEventArgs">
            <summary>
            General event arguments for window events
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowEventArgs.Window">
            <summary>
            The window information associated with this event
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowTitleChangedEventArgs">
            <summary>
            Event arguments for window title change events
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowTitleChangedEventArgs.WindowId">
            <summary>
            The ID of the window whose title changed
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowTitleChangedEventArgs.OldTitle">
            <summary>
            The old title of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowTitleChangedEventArgs.NewTitle">
            <summary>
            The new title of the window
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowInfo">
            <summary>
            Contains information about a window managed by the WindowManagerService
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.Id">
            <summary>
            Unique identifier for the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.Name">
            <summary>
            User-defined name for the window (optional)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.Title">
            <summary>
            Display title of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.Icon">
            <summary>
            Icon render fragment for the window (used in title bar and taskbar)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.State">
            <summary>
            Current state of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.Bounds">
            <summary>
            Current bounds of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.RestoreBounds">
            <summary>
            Bounds before the window was maximized (for restore functionality)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.ZIndex">
            <summary>
            Current z-index of the window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.IsActive">
            <summary>
            Whether this window is currently the active (focused) window
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.Resizable">
            <summary>
            Whether the window can be resized
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.MinWidth">
            <summary>
            Minimum width constraint
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.MinHeight">
            <summary>
            Minimum height constraint
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.MaxWidth">
            <summary>
            Maximum width constraint
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.MaxHeight">
            <summary>
            Maximum height constraint
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.ComponentRef">
            <summary>
            Reference to the actual window component
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.CreatedAt">
            <summary>
            When the window was created
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Models.WindowInfo.ComponentType">
            <summary>
            Type name of the window component (useful for grouping)
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Models.WindowState">
            <summary>
            Represents the possible states of a window in the window manager system.
            </summary>
        </member>
        <member name="F:BlazorWindowManager.Models.WindowState.Normal">
            <summary>
            Window is in its normal state - visible and resizable/movable
            </summary>
        </member>
        <member name="F:BlazorWindowManager.Models.WindowState.Minimized">
            <summary>
            Window is minimized and not visible in the main desktop area
            </summary>
        </member>
        <member name="F:BlazorWindowManager.Models.WindowState.Maximized">
            <summary>
            Window is maximized to fill the entire available container space
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.DialogService">
            <summary>
            Service for creating and managing dialogs
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.DialogService.Create``2(System.Collections.Generic.Dictionary{System.String,System.Object},BlazorWindowManager.Components.WindowBase)">
            <summary>
            Creates a new dialog instance of the specified type
            </summary>
            <typeparam name="TDialog">The dialog component type</typeparam>
            <typeparam name="TResult">The result type for the dialog</typeparam>
            <param name="parameters">Parameters to pass to the dialog</param>
            <param name="owner">The owner window (null for application-modal)</param>
            <returns>The created dialog instance</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.DialogService.ShowMessageBoxAsync(System.String,System.String,BlazorWindowManager.Services.MessageBoxButtons,BlazorWindowManager.Services.MessageBoxIcon,BlazorWindowManager.Components.WindowBase)">
            <summary>
            Shows a simple message box dialog
            </summary>
            <param name="message">The message to display</param>
            <param name="title">The dialog title</param>
            <param name="buttons">The buttons to show</param>
            <param name="icon">The icon to display</param>
            <param name="owner">The owner window</param>
            <returns>The message box result</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.DialogService.ShowPromptAsync(System.String,System.String,System.String,BlazorWindowManager.Components.WindowBase)">
            <summary>
            Shows a prompt dialog for text input
            </summary>
            <param name="message">The prompt message</param>
            <param name="title">The dialog title</param>
            <param name="defaultValue">The default input value</param>
            <param name="owner">The owner window</param>
            <returns>The prompt result</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.DialogService.ShowConfirmationAsync(System.String,System.String,BlazorWindowManager.Components.WindowBase)">
            <summary>
            Shows a confirmation dialog with Yes/No buttons
            </summary>
            <param name="message">The confirmation message</param>
            <param name="title">The dialog title</param>
            <param name="owner">The owner window</param>
            <returns>True if Yes was clicked, false if No or cancelled</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.DialogService.GetActiveDialogs">
            <summary>
            Gets all currently active dialogs
            </summary>
            <returns>Collection of active dialogs</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.DialogService.CloseAllDialogsAsync(System.Boolean)">
            <summary>
            Closes all active dialogs
            </summary>
            <param name="force">Whether to force close dialogs</param>
        </member>
        <member name="T:BlazorWindowManager.Services.MessageBoxButtons">
            <summary>
            Message box button options
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.MessageBoxIcon">
            <summary>
            Message box icon options
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.MessageBoxButton">
            <summary>
            Message box button that was clicked
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.MessageBoxResult">
            <summary>
            Result from a message box dialog
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.MessageBoxResult.Button">
            <summary>
            The button that was clicked
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.SnappingConfiguration">
            <summary>
            Configuration for window snapping behavior
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingConfiguration.IsEnabled">
            <summary>
            Whether window snapping is enabled
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingConfiguration.SnapSensitivity">
            <summary>
            Snap sensitivity in pixels (how close a window needs to be to snap)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingConfiguration.EnableEdgeSnapping">
            <summary>
            Whether to enable edge snapping (to screen boundaries)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingConfiguration.EnableWindowSnapping">
            <summary>
            Whether to enable window-to-window snapping
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingConfiguration.EnableSnapZones">
            <summary>
            Whether to enable snap zones (drag to edge for half-screen, etc.)
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingConfiguration.ShowSnapPreview">
            <summary>
            Whether to show visual feedback during snapping operations
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.SnapTarget">
            <summary>
            Represents a snap target location
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnapTarget.Type">
            <summary>
            Type of snapping operation
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnapTarget.TargetBounds">
            <summary>
            Target bounds where the window would be positioned
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnapTarget.Description">
            <summary>
            Description of the snap operation
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnapTarget.Distance">
            <summary>
            Distance from current position to snap target
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.SnapType">
            <summary>
            Types of snapping operations
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.SnappingService">
            <summary>
            Service responsible for managing window snapping behavior
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.SnappingService.SnapPreviewChanged">
            <summary>
            Event raised when a snap preview should be shown
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.SnappingService.OnSnapPreviewChanged">
            <summary>
            Event raised when snap preview changes (compatible interface for demo)
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.SnappingService.OnSnapApplied">
            <summary>
            Event raised when a snap is applied to a window
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.#ctor(BlazorWindowManager.Services.WindowManagerService)">
            <summary>
            Initializes a new instance of the SnappingService
            </summary>
            <param name="windowManager">The window manager service</param>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingService.Configuration">
            <summary>
            Gets the current snapping configuration
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingService.IsEnabled">
            <summary>
            Gets or sets whether snapping is enabled
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingService.EdgeSensitivity">
            <summary>
            Gets or sets the edge sensitivity for snapping
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingService.ZoneSensitivity">
            <summary>
            Gets or sets the zone sensitivity for snapping
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.SnappingService.ShowSnapPreview">
            <summary>
            Gets or sets whether to show snap preview
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.CalculateSnapTarget(System.Guid,BlazorWindowManager.Models.WindowBounds,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Calculates the best snap target for a window being moved
            </summary>
            <param name="windowId">The ID of the window being moved</param>
            <param name="currentBounds">The current bounds of the window</param>
            <param name="containerBounds">The bounds of the container (desktop area)</param>
            <returns>The best snap target, or null if no snapping should occur</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.UpdateSnapPreview(BlazorWindowManager.Services.SnapTarget)">
            <summary>
            Updates the snap preview display
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.ApplySnapResult(System.Guid,BlazorWindowManager.Models.WindowBounds,BlazorWindowManager.Services.SnapTarget)">
            <summary>
            Applies a snap result and triggers the event
            </summary>
            <param name="windowId">ID of the window being snapped</param>
            <param name="originalBounds">Original bounds before snap</param>
            <param name="target">Snap target being applied</param>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.HideSnapPreview">
            <summary>
            Hides the snap preview
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.ApplySnapping(System.Guid,BlazorWindowManager.Models.WindowBounds,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Applies snapping to a window position
            </summary>
            <param name="windowId">The window to snap</param>
            <param name="currentBounds">Current window bounds</param>
            <param name="containerBounds">Container bounds</param>
            <returns>The snapped bounds, or original bounds if no snapping</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.GetEdgeSnapTargets(BlazorWindowManager.Models.WindowBounds,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Gets edge snapping targets (window edges to container edges)
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.GetSnapZoneTargets(BlazorWindowManager.Models.WindowBounds,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Gets snap zone targets (drag to edge for half-screen layouts)
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.GetWindowSnapTargets(System.Guid,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Gets window-to-window snapping targets
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.DoesVerticalRangeOverlap(BlazorWindowManager.Models.WindowBounds,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Checks if two windows overlap vertically (for horizontal snapping)
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.SnappingService.DoesHorizontalRangeOverlap(BlazorWindowManager.Models.WindowBounds,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Checks if two windows overlap horizontally (for vertical snapping)
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.ThemeService">
            <summary>
            Service for managing themes in the Blazor Window Manager system.
            Handles theme registration, switching, and CSS injection.
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.ThemeService.ThemeChanged">
            <summary>
            Raised when the active theme changes
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.ThemeService.ThemeRegistered">
            <summary>
            Raised when a new theme is registered
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.ThemeService.CurrentTheme">
            <summary>
            Gets the currently active theme
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.ThemeService.RegisteredThemes">
            <summary>
            Gets all registered themes
            </summary>
        </member>
        <member name="P:BlazorWindowManager.Services.ThemeService.Settings">
            <summary>
            Gets current theme settings
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.InitializeAsync">
            <summary>
            Initializes the theme service and loads the default theme
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.RegisterTheme(BlazorWindowManager.Models.ITheme)">
            <summary>
            Registers a new theme
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.GetTheme(System.String)">
            <summary>
            Gets a theme by ID
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.GetThemesByCategory(BlazorWindowManager.Models.ThemeCategory)">
            <summary>
            Gets all themes in a specific category
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.ApplyThemeAsync(System.String)">
            <summary>
            Applies a theme by ID
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.ApplyThemeAsync(BlazorWindowManager.Models.ITheme,System.Boolean)">
            <summary>
            Applies a specific theme
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.UpdateSettingsAsync(BlazorWindowManager.Models.ThemeSettings)">
            <summary>
            Updates theme settings
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.SetCustomVariableAsync(System.String,System.String)">
            <summary>
            Adds or updates a user custom CSS variable
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.RemoveCustomVariableAsync(System.String)">
            <summary>
            Removes a user custom CSS variable
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.GetAvailableThemes">
            <summary>
            Gets all available themes as a list
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.SetThemeAsync(System.String)">
            <summary>
            Sets the active theme by ID
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.RegisterBuiltInThemes">
            <summary>
            Registers all built-in themes
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.LoadSettingsAsync">
            <summary>
            Loads theme settings from local storage
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.ThemeService.SaveSettingsAsync">
            <summary>
            Saves theme settings to local storage
            </summary>
        </member>
        <member name="T:BlazorWindowManager.Services.WindowManagerService">
            <summary>
            Core service for managing windows in the Blazor Window Manager system.
            Handles window registration, z-index management, and global events.
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowCreated">
            <summary>
            Raised when a new window is created and registered
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowBeforeClose">
            <summary>
            Raised before a window is closed (cancellable)
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowCloseCancelled">
            <summary>
            Raised when a window close operation is cancelled
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowAfterClose">
            <summary>
            Raised after a window is closed and removed
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowStateChanged">
            <summary>
            Raised when a window's state changes
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowActiveChanged">
            <summary>
            Raised when the active window changes
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowBoundsChanged">
            <summary>
            Raised when a window's bounds change (move/resize)
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowRegistered">
            <summary>
            Raised when a window is registered with the manager
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowUnregistered">
            <summary>
            Raised when a window is unregistered from the manager
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowFocused">
            <summary>
            Raised when a window gains focus
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowTitleChanged">
            <summary>
            Raised when a window's title changes
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowOpened">
            <summary>
            Raised when a window is opened
            </summary>
        </member>
        <member name="E:BlazorWindowManager.Services.WindowManagerService.WindowClosed">
            <summary>
            Raised when a window is closed
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.RegisterWindow(Microsoft.AspNetCore.Components.ComponentBase,System.Guid,System.String,System.String)">
            <summary>
            Registers a new window with the window manager
            </summary>
            <param name="window">The window component to register</param>
            <param name="id">Unique identifier for the window</param>
            <param name="title">Initial title of the window</param>
            <param name="name">Optional name for the window</param>
            <returns>WindowInfo object containing the window's information</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.UnregisterWindow(System.Guid,System.Boolean)">
            <summary>
            Unregisters a window from the window manager
            </summary>
            <param name="windowId">ID of the window to unregister</param>
            <param name="force">Whether to force close without checking for cancellation</param>
            <returns>True if the window was successfully unregistered</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.GetWindow(System.Guid)">
            <summary>
            Gets information about a specific window
            </summary>
            <param name="windowId">ID of the window to get</param>
            <returns>WindowInfo if found, null otherwise</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.GetAllWindows">
            <summary>
            Gets a list of all currently registered windows
            </summary>
            <returns>Read-only list of WindowInfo objects</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.GetActiveWindow">
            <summary>
            Gets the currently active window
            </summary>
            <returns>WindowInfo of the active window, or null if no window is active</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.BringToFront(System.Guid)">
            <summary>
            Brings a window to the front and makes it active
            </summary>
            <param name="windowId">ID of the window to bring to front</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.UpdateWindowState(System.Guid,BlazorWindowManager.Models.WindowState)">
            <summary>
            Updates the state of a window
            </summary>
            <param name="windowId">ID of the window to update</param>
            <param name="newState">New state for the window</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.UpdateWindowBounds(System.Guid,BlazorWindowManager.Models.WindowBounds)">
            <summary>
            Updates the bounds of a window
            </summary>
            <param name="windowId">ID of the window to update</param>
            <param name="newBounds">New bounds for the window</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.UpdateWindowTitle(System.Guid,System.String)">
            <summary>
            Updates the title of a window
            </summary>
            <param name="windowId">ID of the window to update</param>    /// <param name="newTitle">New title for the window</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.SendMessage(System.Guid,System.Guid,System.Object)">
            <summary>
            Sends a message from one window to another
            </summary>
            <param name="sourceWindowId">ID of the sending window</param>
            <param name="targetWindowId">ID of the receiving window</param>
            <param name="message">Message payload to send</param>
            <returns>True if the message was delivered</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.SetActiveWindow(BlazorWindowManager.Models.WindowInfo)">
            <summary>
            Sets the active window and raises appropriate events
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.CalculateInitialPosition">
            <summary>
            Calculates the initial position for a new window using cascading logic
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.OpenWindowAsync(Microsoft.AspNetCore.Components.ComponentBase,System.Guid,System.String,System.String)">
            <summary>
            Asynchronously opens a new window
            </summary>
            <param name="window">The window component to register</param>
            <param name="id">Unique identifier for the window</param>
            <param name="title">Initial title of the window</param>
            <param name="name">Optional name for the window</param>
            <returns>Task that completes with WindowInfo when the operation is done</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.OpenWindowAsync``1">
            <summary>
            Asynchronously opens a new window
            </summary>
            <param name="id">Unique identifier for the window</param>
            <param name="title">Initial title of the window</param>
            <param name="name">Optional name for the window</param>
            <returns>Task that completes with WindowInfo when the operation is done</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.CloseWindowAsync(System.Guid,System.Boolean)">
            <summary>
            Asynchronously closes a window
            </summary>
            <param name="windowId">ID of the window to close</param>
            <param name="force">Whether to force close without checking for cancellation</param>
            <returns>Task that completes when the operation is done</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.MinimizeWindowAsync(System.Guid)">
            <summary>
            Asynchronously minimizes a window
            </summary>
            <param name="windowId">ID of the window to minimize</param>
            <returns>Task that completes when the operation is done</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.MaximizeWindowAsync(System.Guid)">
            <summary>
            Asynchronously maximizes a window
            </summary>
            <param name="windowId">ID of the window to maximize</param>
            <returns>Task that completes when the operation is done</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.RestoreWindowAsync(System.Guid)">
            <summary>
            Asynchronously restores a window to normal state
            </summary>
            <param name="windowId">ID of the window to restore</param>
            <returns>Task that completes when the operation is done</returns>
        </member>
        <member name="M:BlazorWindowManager.Services.WindowManagerService.FocusWindowAsync(System.Guid)">
            <summary>
            Asynchronously focuses a window
            </summary>
            <param name="windowId">ID of the window to focus</param>
            <returns>Task that completes when the operation is done</returns>
        </member>
        <member name="T:BlazorWindowManager.Services.IWindowMessageReceiver">
            <summary>
            Interface for components that can receive inter-window messages
            </summary>
        </member>
        <member name="M:BlazorWindowManager.Services.IWindowMessageReceiver.OnMessageReceived(BlazorWindowManager.Models.WindowMessageEventArgs)">
            <summary>
            Called when a message is received from another window
            </summary>
            <param name="args">Message event arguments</param>
        </member>
    </members>
</doc>
